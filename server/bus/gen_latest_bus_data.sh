#!/bin/bash -x

# Bus data is a little more complicated than rapid.
# First you need to download and decompress the raw data following the appropriate lines from setup_bus_data.sh.
# Note: you won't need to download all the year's data, unless you want to fill your hard drive for fun. just the latest for a routine update.
# Once its extracted in the right folder, you'll need to run `./check_latest_manifests.sh data/input/2023/.../<filename>.csv`.
# This will compare the timepoints used in the data to the current manifest.json file we have for that route.
# This is needed because sometimes routes or stops change and we need to make sure our json is up to date.
# If you see any removed stop ids, this is okay. These were used in the past but are no longer present.
# Keep them in the manifest.json (in src/bus_constants/) so historical data still works.
# If you see any new stop ids, these /might/ need to be added to existing stations so the current month's data will look complete.
# It's worth checking though to make sure that it's actually an update to the timepointing, and not just a weird exception for a route variant, early am trips, etc.
# If you see any new stations, this needs a closer look. Did the route change substantially? The manifest.json may need an update but we want to balance
# the current data accuracy along with being able to search historically.
# The following warnings are benign and can be ignored:
#   - The additional station peter for route 15 is only used for a rare variant and doesn't need to be added. 
#   - The additional station abmta for route 71 is only used for the short-turn routes. These are duplicated in other stops on the route, so don't include it.
#   - Sometimes nubn is listed as removed and dudly is listed as added. These are probably equivalent and can be ignored. (I hope they stop making this error.)

# Once manifest files are up to date, the data can be generated by running this script.
# (It will download GTFS archives to calculate schedule values as it generates the data)
# Then, src/constants.js needs an update to the bus date range.
# Lastly, the data can be uploaded to s3 following the cp command below.

newfile=$1

poetry run python bus2train.py $newfile data/output -r 1  15  22  23  28  32  39  57  66  71  73  77  111 114 116 117;
# sample upload command below. note that an aws cp --recursive will be faster.
# aws s3 sync --dryrun data/output/Events/ s3://tm-mbta-performance/Events/
# aws s3 cp --recursive --dryrun data/output/Events/ s3://tm-mbta-performance/Events/
